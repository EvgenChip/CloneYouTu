{"version":3,"file":"static/js/370.24b9e5ab.chunk.js","mappings":"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","sources":["components/contentArea/ContentArea.tsx","Pages/Home.tsx","utils/parseVideoDuration.ts","utils/timesVideo.ts","utils/convertRawViews.ts","api/hooks.ts","utils/parseDataVideoDetails.tsx","utils/parseData.ts","components/card/styles.tsx","components/card/Card.tsx","components/CardList/CardList.tsx","components/Content/index.tsx","components/contentArea/styles.tsx"],"sourcesContent":["import { Box } from \"@mui/material\";\n\nimport { SideList } from \"../sideList/SideList\";\nimport { appContentWrapper } from \"./styles\";\nimport { useAwesomeSearchVideo } from \"../../api/hooks\";\n\nimport { Content } from \"../Content\";\n\ntype ContentAreaProps = { open: boolean };\n\nexport const ContentArea: React.FC<ContentAreaProps> = ({ open }) => {\n  const sideOpen = open ? \"70px\" : \"250px\";\n  const { data, nextPageToken } = useAwesomeSearchVideo({\n    ignoreSearch: true,\n  });\n\n  return (\n    <Box component=\"main\" sx={appContentWrapper}>\n      <Box\n        component=\"div\"\n        sx={{\n          flexBasis: sideOpen,\n          flexGrow: 0,\n          flexShrink: 0,\n          overflowY: \"auto\",\n        }}>\n        <SideList />\n      </Box>\n      <Content\n        videos={data}\n        nextPageToken={nextPageToken}\n        sideOpen={sideOpen}\n      />\n    </Box>\n  );\n};\n","import { ContentArea } from \"../components/contentArea/ContentArea\";\nimport { NavMenu } from \"../components/navigation/NavMenu\";\nimport { Box } from \"@mui/material\";\nimport { appWrapper } from \"../styles/styles\";\nimport { useState } from \"react\";\n\nconst Home = () => {\n  const [openSide, setOpenSide] = useState(false);\n\n  const handleSideToogle = () => {\n    setOpenSide(!openSide);\n  };\n\n  return (\n    <Box sx={appWrapper}>\n      <NavMenu handleSideToggle={handleSideToogle} />\n      <ContentArea open={openSide} />\n    </Box>\n  );\n};\n\nexport default Home;","export const parseVideoDuration = (duration: string): string => {\n  const durationParts: string[] = duration\n    .replace(\"PT\", \"\")\n    .replace(\"H\", \":\")\n    .replace(\"M\", \":\")\n    .replace(\"S\", \"\")\n    .split(\":\");\n\n  if (durationParts.length === 3) {\n    return `${durationParts[0]}:${\n      parseInt(durationParts[1]) < 9 ? `0${durationParts[1]}` : durationParts[1]\n    }:${\n      parseInt(durationParts[2]) < 9 ? `0${durationParts[2]}` : durationParts[2]\n    }`;\n  }\n\n  if (durationParts.length === 2) {\n    return `${durationParts[0]}:${\n      parseInt(durationParts[1]) < 9 ? `0${durationParts[1]}` : durationParts[1]\n    }`;\n  }\n\n  if (durationParts.length === 1) {\n    return `0:${\n      parseInt(durationParts[0]) < 9 ? `0${durationParts[0]}` : durationParts[0]\n    }`;\n  }\n\n  return \"\";\n};\n","export const timesVideo = (date: Date) => {\n  const seconds = Math.floor((new Date().valueOf() - date.valueOf()) / 1000);\n\n  let interval = seconds / 31536000;\n\n  if (interval > 1) {\n    return Math.floor(interval) + \" years\";\n  }\n  interval = seconds / 2592000;\n  if (interval > 1) {\n    return Math.floor(interval) + \" months\";\n  }\n  interval = seconds / 86400;\n  if (interval > 1) {\n    return Math.floor(interval) + \" days\";\n  }\n  interval = seconds / 3600;\n  if (interval > 1) {\n    return Math.floor(interval) + \" hours\";\n  }\n  interval = seconds / 60;\n  if (interval > 1) {\n    return Math.floor(interval) + \" minutes\";\n  }\n  return Math.floor(seconds) + \" seconds\";\n};\n","export const convertRawViews = (labelValue: string, isSub = false): string => {\n  const parsed = +labelValue;\n\n  if (parsed >= 1.0e9) {\n    return parsed.toFixed(0) + \"B\";\n  }\n  if (parsed >= 1.0e6) {\n    return parsed.toFixed(0) + \"M\";\n  }\n  if (parsed >= 1.0e3) {\n    return parsed.toFixed(isSub ? 2 : 0) + \"K\";\n  }\n\n  return labelValue;\n};\n","import { useAppSelector } from \"../store/hooks\";\nimport { parseData } from \"../utils/parseData\";\nimport { useMemo, useRef } from \"react\";\nimport { parseDataVideoDetails } from \"../utils/parseDataVideoDetails\";\nimport {\n  useGetVideoDetailsQuery,\n  useGetChannelDetailsQuery,\n  useGetSearchVideosQuery,\n  useGetChannelsDataQuery,\n  useGetContentDetailsQuery,\n} from \"./api\";\n\nexport const useAwesomeVideo = (id: string) => {\n  const { data: item } = useGetVideoDetailsQuery(id);\n\n  const channelId = item?.snippet?.channelId;\n  const { data: details } = useGetChannelDetailsQuery(channelId, {\n    skip: !channelId,\n  });\n\n  const res = useMemo(() => {\n    if (details && item) {\n      return parseDataVideoDetails(item, details);\n    }\n\n    return null;\n  }, [details, item]);\n\n  return res;\n};\n\nexport const useAwesomeSearchVideo = (\n  options: { ignoreSearch?: boolean } = {}\n) => {\n  const { ignoreSearch } = options;\n  const searchTerm = useAppSelector((state) => state.mainApp.searchTerm);\n  const pageToken = useAppSelector((state) => state.mainApp.nextPageToken);\n  const requestParams = useMemo(() => {\n    return { pageToken, searchTerm };\n  }, [pageToken, searchTerm]);\n\n  const searchRes = useGetSearchVideosQuery(requestParams, {\n    skip: !ignoreSearch && !searchTerm,\n    refetchOnMountOrArgChange: true,\n  });\n\n  const nextPageToken = searchRes.data?.nextPageToken;\n  const items = searchRes.data?.items;\n\n  const channelsAndVideosIds = useMemo(() => {\n    const videoIds: string[] = [];\n    const channelIds: string[] = [];\n\n    if (!items) {\n      return { videoIds, channelIds };\n    }\n\n    items?.forEach((item) => {\n      channelIds.push(item.snippet.channelId);\n      videoIds.push(item.id.videoId);\n    });\n\n    return { videoIds, channelIds };\n  }, [items]);\n\n  const channelsDataRes = useGetChannelsDataQuery(\n    channelsAndVideosIds.channelIds,\n    {\n      skip: channelsAndVideosIds.channelIds.length === 0,\n    }\n  );\n\n  const channelsData = channelsDataRes.data?.items;\n\n  const contentDetails = useGetContentDetailsQuery(\n    channelsAndVideosIds.videoIds,\n    {\n      skip: channelsAndVideosIds.videoIds.length === 0,\n    }\n  );\n  const videoData = contentDetails.data?.items;\n\n  const prevVideos = useRef<ReturnType<typeof parseData>>([]);\n  const transformSearchRes = useMemo(() => {\n    if (items && channelsData && channelsAndVideosIds && videoData) {\n      const data = parseData(items, channelsData, videoData);\n\n      if (pageToken) {\n        prevVideos.current = [...prevVideos.current, ...data];\n      } else {\n        prevVideos.current = [...data];\n      }\n\n      return {\n        data: [...prevVideos.current],\n        nextPageToken,\n      };\n    }\n\n    return {\n      nextPageToken,\n      data: [],\n    };\n  }, [\n    items,\n    channelsData,\n    videoData,\n    pageToken,\n    nextPageToken,\n    channelsAndVideosIds,\n  ]);\n\n  return transformSearchRes;\n};\n","import { VideosOrChannelsItem } from \"../Types\";\nimport { convertRawViews, timesVideo } from \"./\";\n\ntype DataItem = {\n  snippet: {\n    channelId: string;\n    title: string;\n    description: string;\n    publishedAt: Date;\n    channelTitle: string;\n  };\n  id: string;\n  statistics: { viewCount: string; likeCount: string };\n};\n\nexport const parseDataVideoDetails = (\n  item: DataItem,\n  detail: VideosOrChannelsItem\n) => {\n  const channelImage = detail.snippet.thumbnails.default.url;\n  const subscriberCount = detail.statistics.subscriberCount;\n\n  return {\n    videoId: item.id,\n    title: item.snippet.title,\n    description: item.snippet.description,\n    views: parseInt(item.statistics.viewCount).toLocaleString(),\n    likes: convertRawViews(item.statistics.likeCount),\n    age: timesVideo(new Date(item.snippet.publishedAt)),\n    channelInfo: {\n      id: item.snippet.channelId,\n      image: channelImage,\n      name: item.snippet.channelTitle,\n      subscribers: convertRawViews(subscriberCount, true),\n    },\n  };\n};\n","import { parseVideoDuration, timesVideo } from \"./index\";\nimport {\n  HomePageVideos,\n  SearchVideosItem,\n  VideosOrChannelsItem,\n} from \"../Types\";\n\nexport const parseData = (\n  items: SearchVideosItem[],\n  channelsData: VideosOrChannelsItem[],\n  videosData: VideosOrChannelsItem[]\n) => {\n  try {\n    const channelsMap: Record<string, string> = {};\n\n    channelsData.forEach((channel) => {\n      channelsMap[channel.id] = channel.snippet.thumbnails.default.url;\n    });\n\n    const parsedData: HomePageVideos[] = [];\n    items.forEach((item, index) => {\n      const channelImage = channelsMap[item.snippet.channelId];\n\n      if (channelImage)\n        parsedData.push({\n          videoId: item.id.videoId,\n          title: item.snippet.title,\n          description: item.snippet.description,\n          thumbnail: item.snippet.thumbnails.medium.url,\n          link: `https://www.youtube.com/watch?v=${item.id.videoId}`,\n          duration:\n            videosData[index] &&\n            parseVideoDuration(videosData[index].contentDetails.duration),\n          videoAge: timesVideo(new Date(item.snippet.publishedAt)),\n          channelInfo: {\n            id: item.snippet.channelId,\n            image: channelImage || \"\",\n            name: item.snippet.channelTitle,\n          },\n        });\n    });\n\n    return parsedData;\n  } catch (err) {\n    console.log(err);\n  }\n};\n","export const appCardList = {\n  width: \"100%\",\n  bgcolor: \"background.paper\",\n  p: 0,\n  m: 0,\n  maxWidth: \"100%\",\n};\n","import Avatar from \"@mui/material/Avatar\";\nimport Box from \"@mui/system/Box\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CardMedia from \"@mui/material/CardMedia\";\nimport List from \"@mui/material/List\";\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemAvatar from \"@mui/material/ListItemAvatar\";\nimport { flexColumnCenter } from \"../../styles/styles\";\nimport { FC } from \"react\";\nimport { AiFillCheckCircle } from \"react-icons/ai\";\nimport { Typography } from \"@mui/material\";\nimport { trimText } from \"../../data/data\";\nimport { appCardList } from \"./styles\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\n\ntype Props = {\n  url: string;\n  title: string;\n  channelTitle: string;\n  videoId: string;\n  channelImage: string;\n  duration: string;\n};\n\nexport const AppCard: FC<Props> = ({\n  url,\n  title,\n  channelTitle,\n  videoId,\n  channelImage,\n  duration,\n}) => {\n  return (\n    <Card sx={{ boxShadow: 0, position: \"relative\" }}>\n      <Box\n        sx={{\n          position: \"absolute\",\n          bgcolor: \"black\",\n          color: \"white\",\n          mt: 28,\n          ml: 43,\n        }}>\n        <Typography>{duration}</Typography>\n      </Box>\n      <Link to={`/watch/${videoId}`}>\n        <CardMedia component=\"img\" height=\"240\" image={url} alt={title} />\n      </Link>\n      <CardContent sx={{ m: 0, p: 0 }}>\n        <List sx={appCardList}>\n          <ListItem>\n            <ListItemAvatar>\n              <Avatar alt=\"Channel avatar\" src={channelImage} />\n            </ListItemAvatar>\n            <Box sx={flexColumnCenter}>\n              <Typography\n                sx={{ fontWeight: \"bold\", mb: 1 }}\n                gutterBottom\n                variant=\"h5\"\n                component=\"div\">\n                {trimText(title)}\n              </Typography>\n              <Box sx={{ display: \"flex\", alignItems: \"center\" }}>\n                <Typography\n                  sx={{ mr: 1, mb: 0, p: 0 }}\n                  gutterBottom\n                  variant=\"h5\"\n                  component=\"div\">\n                  {channelTitle}\n                </Typography>\n                <AiFillCheckCircle />\n              </Box>\n            </Box>\n          </ListItem>\n        </List>\n      </CardContent>\n    </Card>\n  );\n};\n\nAppCard.propTypes = {\n  url: PropTypes.string,\n  title: PropTypes.string,\n  channelTitle: PropTypes.string,\n  videoId: PropTypes.string,\n  channelImage: PropTypes.string,\n  duration: PropTypes.string,\n};","import { FC } from \"react\";\nimport { Box, Grid } from \"@mui/material\";\nimport { AppCard } from \"../card/Card\";\nimport { useAwesomeSearchVideo } from \"../../api/hooks\";\n\ntype Props = {\n  items: ReturnType<typeof useAwesomeSearchVideo>[\"data\"];\n};\n\nexport const CardList: FC<Props> = ({ items }) => {\n  return (\n    <Box>\n      <Grid container rowSpacing={1} columnSpacing={{ xs: 2, sm: 4 }}>\n        {items.length &&\n          items.map((item) => {\n            const { duration, videoId, thumbnail, title, channelInfo } = item;\n            const { image: channelImage, name: channelTitle } = channelInfo;\n\n            return (\n              <Grid key={item.videoId} item xs={12} sm={6} md={4} lg={3}>\n                <AppCard\n                  duration={duration}\n                  url={thumbnail}\n                  title={title}\n                  channelTitle={channelTitle}\n                  videoId={videoId}\n                  channelImage={channelImage}\n                />\n              </Grid>\n            );\n          })}\n      </Grid>\n    </Box>\n  );\n};\n","import InfiniteScroll from \"react-infinite-scroll-component\";\nimport { CardList } from \"../CardList/CardList\";\nimport { Box } from \"@mui/material\";\nimport { useAppDispatch } from \"../../store/hooks\";\nimport { setNextPageToken } from \"../../store\";\nimport { useAwesomeSearchVideo } from \"../../api/hooks\";\n\ntype ContentProps = {\n  videos: ReturnType<typeof useAwesomeSearchVideo>[\"data\"];\n  nextPageToken: string;\n  sideOpen: string;\n};\n\nexport const Content: React.FC<ContentProps> = ({\n  videos,\n  nextPageToken,\n  sideOpen,\n}) => {\n  const dispatch = useAppDispatch();\n  if (videos.length === 0) {\n    return (\n      <Box\n        sx={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          width: \"100%\",\n        }}>\n        no videos.\n      </Box>\n    );\n  }\n\n  return (\n    <Box\n      component=\"div\"\n      id=\"scrollableDiv\"\n      sx={{\n        flexGrow: 1,\n        p: 1,\n        overflowY: \"auto\",\n        overflowX: \"hidden\",\n        width: `calc(100vw - ${sideOpen})`,\n      }}>\n      <InfiniteScroll\n        dataLength={videos.length}\n        next={() => dispatch(setNextPageToken(nextPageToken))}\n        hasMore={videos.length < 500}\n        loader={\"Loading...\"}\n        scrollableTarget=\"scrollableDiv\"\n        height={900}>\n        <CardList items={videos} />\n      </InfiniteScroll>\n    </Box>\n  );\n};\n","export const appContentWrapper = {\n  display: \"flex\",\n  mt: 8,\n  width: \"100vw\",\n  overflow: \"hidden\",\n};\n"],"names":["ContentArea","_ref","sideOpen","open","_useAwesomeSearchVide","useAwesomeSearchVideo","ignoreSearch","data","nextPageToken","_jsxs","Box","component","sx","appContentWrapper","children","_jsx","flexBasis","flexGrow","flexShrink","overflowY","SideList","Content","videos","_useState","useState","_useState2","_slicedToArray","openSide","setOpenSide","appWrapper","NavMenu","handleSideToggle","parseVideoDuration","duration","durationParts","replace","split","length","concat","parseInt","timesVideo","date","seconds","Math","floor","Date","valueOf","interval","convertRawViews","labelValue","isSub","arguments","undefined","parsed","toFixed","useAwesomeVideo","id","_item$snippet","item","useGetVideoDetailsQuery","channelId","snippet","details","useGetChannelDetailsQuery","skip","useMemo","detail","channelImage","thumbnails","default","url","subscriberCount","statistics","videoId","title","description","views","viewCount","toLocaleString","likes","likeCount","age","publishedAt","channelInfo","image","name","channelTitle","subscribers","parseDataVideoDetails","_searchRes$data","_searchRes$data2","_channelsDataRes$data","_contentDetails$data","searchTerm","useAppSelector","state","mainApp","pageToken","requestParams","searchRes","useGetSearchVideosQuery","refetchOnMountOrArgChange","items","channelsAndVideosIds","videoIds","channelIds","forEach","push","channelsData","useGetChannelsDataQuery","videoData","useGetContentDetailsQuery","prevVideos","useRef","transformSearchRes","videosData","channelsMap","channel","parsedData","index","thumbnail","medium","link","contentDetails","videoAge","err","console","log","parseData","current","_toConsumableArray","appCardList","width","bgcolor","p","m","maxWidth","AppCard","Card","boxShadow","position","color","mt","ml","Typography","Link","to","CardMedia","height","alt","CardContent","List","ListItem","ListItemAvatar","Avatar","src","flexColumnCenter","fontWeight","mb","gutterBottom","variant","trimText","display","alignItems","mr","AiFillCheckCircle","CardList","Grid","container","rowSpacing","columnSpacing","xs","sm","map","md","lg","dispatch","useAppDispatch","justifyContent","overflowX","InfiniteScroll","dataLength","next","setNextPageToken","hasMore","loader","scrollableTarget","overflow"],"sourceRoot":""}